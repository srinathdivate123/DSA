// We are given a rod of size N. It can be cut into pieces. Each length of a piece has a particular price given by the price array. Our task is to find the maximum revenue that can be generated by selling the rod after cutting (if required) into pieces.

// We can see this problem as a bottom-up by thinking that we have a lot of lengths 0, 1, 2, 3, 4, ..., n. We have to collect rod lengths to make n, and while collecting, maximise the price!

// Solution is same as prev one.
#include <bits/stdc++.h>
using namespace std;

// TC = n*w, SC = n*w + n. Till index ind, what is the maximum proce you can obtain for a rod of size n.
int memoization(vector<int> &wt, vector<int> &val, int ind, int W, vector<vector<int>> &dp)
{
    if (ind == 0)
        return (W / wt[0]) * val[0];
    if (dp[ind][W] != -1)
        return dp[ind][W];

    int notTaken = 0 + memoization(wt, val, ind - 1, W, dp);
    int taken = INT_MIN;
    if (wt[ind] <= W)
        taken = val[ind] + memoization(wt, val, ind, W - wt[ind], dp);
    return dp[ind][W] = max(notTaken, taken);
}

// TC = n*w, SC = n*w
int tabulation(int n, int W, vector<int> &val, vector<int> &wt)
{
    vector<vector<int>> dp(n, vector<int>(W + 1, 0));
    for (int i = wt[0]; i <= W; i++)
        dp[0][i] = (i / wt[0]) * val[0];

    for (int ind = 1; ind < n; ind++)
        for (int cap = 0; cap <= W; cap++)
        {
            int notTaken = 0 + dp[ind - 1][cap];
            int taken = INT_MIN;
            if (wt[ind] <= cap)
                taken = val[ind] + dp[ind][cap - wt[ind]];
            dp[ind][cap] = max(notTaken, taken);
        }

    return dp[n - 1][W];
}

// TC = n*w, SC = 2w
int spaceOpotimsied(int n, int W, vector<int> &val, vector<int> &wt)
{
    vector<int> prev(W + 1, 0), cur(W + 1, 0);
    for (int i = 0; i <= W; i++)
        prev[i] = (i / wt[0]) * val[0];

    for (int ind = 1; ind < n; ind++)
    {
        for (int cap = 0; cap <= W; cap++)
        {
            int notTaken = prev[cap];
            int taken = INT_MIN;
            if (wt[ind] <= cap)
                taken = val[ind] + cur[cap - wt[ind]];

            cur[cap] = max(notTaken, taken);
        }
        prev = cur;
    }
    return cur[W];
}

int main()
{
    vector<int> wt = {2, 4, 6};
    vector<int> val = {5, 11, 13};
    int W = 10;
    int n = wt.size();
    vector<vector<int>> dp(n, vector<int>(W + 1, -1));
    cout << memoization(wt, val, n - 1, W, dp) << endl;
    cout << tabulation(n, W, val, wt) << endl;
    cout << spaceOpotimsied(n, W, val, wt) << endl;
    return 0;
}